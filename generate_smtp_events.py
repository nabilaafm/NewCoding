# -*- coding: utf-8 -*-
"""generate_smtp_events.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UpCbRnzPMqT3ouWzHFomoyxXYlOhOiVM
"""

import csv
from datetime import datetime, timedelta
import random

def generate_sample_smtp_events(num_records=500):
    # Email event types
    event_types = ["delivered", "bounces", "soft_bounces", "spam", "opens", "clicks", "invalid", "blocked"]
    email_domains = ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "company.com", "example.org"]
    templates = [f"template_{i}" for i in range(1, 6)]

    # Generate base timestamp
    end_date = datetime.now()

    events = []
    for i in range(num_records):
        # Generate timestamp within last 30 days
        event_time = end_date - timedelta(
            days=random.randint(0, 30),
            hours=random.randint(0, 23),
            minutes=random.randint(0, 59)
        )

        email = f"user{random.randint(1000, 9999)}@{random.choice(email_domains)}"

        event = {
            "email": email,
            "date": event_time.strftime("%Y-%m-%d %H:%M:%S"),
            "subject": f"Campaign Subject {random.randint(1, 20)}",
            "messageId": f"<{random.getrandbits(32):x}@server>",
            "event": random.choice(event_types),
            "reason": "Message sent",
            "tag": f"tag_{random.randint(1, 10)}",
            "ip": f"{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}",
            "link": f"https://example.com/campaign/{random.randint(1000, 9999)}",
            "from": "marketing@company.com",
            "templateId": random.choice(templates)
        }

        # Add specific details based on event type
        if event["event"] == "bounces":
            event["reason"] = random.choice([
                "Mailbox full",
                "Invalid recipient",
                "Temporary failure",
                "DNS failure"
            ])
        elif event["event"] == "blocked":
            event["reason"] = random.choice([
                "Blocked by anti-spam",
                "IP blacklisted",
                "Domain blocked"
            ])

        events.append(event)

    # Sort by date in descending order
    events.sort(key=lambda x: x["date"], reverse=True)

    return events

# Generate the data
events = generate_sample_smtp_events(500)

# Save to CSV
csv_filename = 'smtp_events.csv'
fieldnames = ["email", "date", "subject", "messageId", "event", "reason",
              "tag", "ip", "link", "from", "templateId"]

with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(events)

print(f"CSV file '{csv_filename}' has been created with {len(events)} records.")

# Print first few lines of the CSV as preview
with open(csv_filename, 'r', encoding='utf-8') as csvfile:
    print("\nPreview of the first 3 lines:")
    for i, line in enumerate(csvfile):
        if i < 4:  # Header + 3 lines
            print(line.strip())